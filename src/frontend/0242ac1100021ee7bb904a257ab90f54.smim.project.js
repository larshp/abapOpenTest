export class ProjectPage {
  constructor(name) {
    this.name = name;
  }

  renderDetails(details) {
    return "Package: " + details.DEVCLASS + "<br>";
  }

  renderChart(list) {
    var ctx = document.getElementById("myChart").getContext('2d');

    let labels = [];
    let passed = [];
    let failed = [];
    for(let run of list) {
      labels.push("Run #" + run.RUN_NAME);
      passed.push(run.TESTS_PASSED);
      failed.push(run.TESTS_FAILED);
    }

    var myChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
            label: 'Passed',
            backgroundColor: 'rgb(50, 205, 50)',
            borderWidth: 1,
            borderColor: 'rgb(0, 0, 0)',
            data: passed
        }, {
            label: 'Failed',
            backgroundColor: 'rgb(255, 40, 0)',
            borderWidth: 1,
            borderColor: 'rgb(0, 0, 0)',
            data: failed
        }]
      },
      options: {
          scales: {
            xAxes: [{stacked: true}],
            yAxes: [{stacked: true, ticks: {beginAtZero:true}}]
          }
      }
    });
  }

  renderRuns(list) {
    if (list.length === 0) {
      return "empty list, no runs, schedule background job ZAOT_RUNNER<br>";
    }

    let result = "<table><tr><td></td><td></td><td><u>Objects</u></td><td><u>Passed</u></td><td><u>Failed</u></td></tr>";
    for(let run of list) {
      result = result + 
        "<tr>" +
        "<td>" + Router.link("projects/"+this.name+"/runs/"+run.RUN_NAME, "Run #" + run.RUN_NAME) + "</td>" + 
        "<td align='right'>" + Time.ago(Time.parse(run.START_TIME)) + "</td>" + 
        "<td align='right'>" + Router.link("projects/"+this.name+"/runs/"+run.RUN_NAME+"/objects", run.OBJECTS) + "</td>" + 
        "<td align='right'>" + run.TESTS_PASSED + "</td>" + 
        "<td align='right'>" + run.TESTS_FAILED + "</td>" +
        "</tr>";
    }
    result = result + "</table>";

    this.renderChart(list);

    result = result + "todo, latest runs, things changed<br>";

    return result;
  }

  render() {
    return "<h1>" + this.name + "</h1>" + 
      REST.projectDetails(this.name, this.renderDetails) + "<br>" +
      "todo: select number of days<br>"+
      REST.listRuns(this.name, this.renderRuns.bind(this)) + 
      "<canvas id='myChart' width='400' height='100'></canvas>";
  }
}

