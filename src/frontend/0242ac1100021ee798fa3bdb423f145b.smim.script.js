const base = '/sap/zabapopentest';

function handleError(evt, callback, json) {
  if (evt.target.status === 200) {
    if (json === true) {
      callback(JSON.parse(evt.target.responseText).DATA);
    } else {
      callback(evt.target.responseText);
    }
  } else {
    alert("REST call failed, status: " + evt.target.status);
  }
}

class REST {
  static root = base + "/rest/";

  static list(pkg, callback) {
    this.get("list?IV_PACKAGE=" + pkg, callback);
  }

  static run(cla, callback) {
    this.post("run", callback, cla);
  }

  static get(folder, callback, json = true) {
    let oReq = new XMLHttpRequest();
    oReq.addEventListener("load", (evt) => { handleError(evt, callback, json); });
    oReq.open("GET", this.root + folder);
    oReq.send();
  }

  static post(folder, callback, data) {
    let oReq = new XMLHttpRequest();
    oReq.addEventListener("load", (evt) => { handleError(evt, callback, false); });
    oReq.open("POST", this.root + folder);
    oReq.send(JSON.stringify(data));
  }
}

class SettingsComponent extends React.Component {
  constructor(props) {
    super(props);
  }

  handleChange(e) {
    this.props.settings.package = e.target.value;      
    this.props.updateSettings(this.props.settings);
  }

  render() {
    return (<div>
      Package: <input name="package" type="text" maxlength="30" value={ 
      this.props.settings.package } onChange={
      this.handleChange.bind(this)} />
    </div>);
  }
}

class ClassComponent extends React.Component {
  render() {
//    console.log(this.props);
    return (<div>{this.props.data.NAME} {this.props.data.LAST_CHANGED}</div>);
  }
}

class ResultsComponent extends React.Component {
  constructor(props) {
    super(props);
// console.log("constructor, results");
    this.state = { results: [] };
  }

  componentDidMount() {
    REST.list(this.props.settings.package, this.receiveList.bind(this));
  }

  receiveList(list) {
    this.state.results = list;
    this.setState(this.state);
    setTimeout(() => {REST.list(this.props.settings.package, this.receiveList.bind(this)); }, 1000);
  }

  render() {
//    console.dir("render results");
    return (<div>
      Results
      {this.state.results.map((e)=>{ return <ClassComponent data={e} />; })}
      </div>);
  }
}

class Application extends React.Component {
  constructor(props) {
    super(props);
    this.state = { 
      settings: { 
        package: ""
      },
      results: []};
  }

  updateSettings(s) {
    this.state.settings = s;
    this.setState(this.state);
  }

  render() {     
    return (<div>
      <SettingsComponent settings={this.state.settings} updateSettings={this.updateSettings.bind(this)}/>
      <ResultsComponent settings={this.state.settings} />
      <br /><br /><br /><br />
      <a href={base + "/rest/swagger.html"}>swagger</a>
      </div>);
  }
}

ReactDOM.render(<Application />, document.getElementById('app'));
