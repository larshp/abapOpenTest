import {REST} from './rest.js';
import {Router} from './router.js';
import {Time} from './time.js';

export const base = '/sap/zabapopentest';

export class StartPage {
  renderList(list) {
    let result = "";
    for(let project of list) {
      result = result + 
        "<div>" + 
        "Name: " + Router.link("projects/" + project.NAME, project.NAME) + "<br>" +
        "Package: " + project.DEVCLASS + "<br>" +
        Router.link("projects/" + project.NAME + "/runner", "autorunner") + 
        "</div><br>";
    }

    if(list.length === 0) {
      result = result + "Empty list<br>";
    }

    result = result + Router.link("create", "create project") + "<br>";

    return result;
  }

  render() {
    return "<h1>abapOpenTest</h1>" + 
      REST.listProjects(this.renderList) + 
      "<br><a href=\"" + base + "/rest/swagger.html\">swagger</a>";
  }
}

export class CreateProjectPage {
  constructor() {
    window.CreateProjectPage = {};
    window.CreateProjectPage.callback = this.callback.bind(this);
  }

  created() {
    alert("project created");
  }

  callback() {
    REST.createProject(
      document.getElementById("name").value,
      document.getElementById("package").value,
      document.getElementById("risk_level").value,
      document.getElementById("duration").value,
      this.created.bind(this));
  }

  render() {
    let result = "<h1>Create Project</h1>" +
      "<table>" + 
      "<form id=\"createForm\">" +
      "<tr><td>Name:</td><td><input type=\"text\" id=\"name\" maxlength=\"20\" required></td></tr>" +
      "<tr><td>Package:</td><td><input type=\"text\" id=\"package\" maxlength=\"30\" required></td></tr>" +
      "<tr><td>Risk Level:</td><td><select id=\"risk_level\">" +
      "<option value=\" 11\" selected>Harmless</option>" +
      "<option value=\" 22\">Dangerous</option>" +
      "<option value=\" 33\">Critical</option>" +
      "</select></td></tr>" +
      "<tr><td>Duration:</td><td><select id=\"duration\">" +
      "<option value=\" 12\" selected>Short</option>" +
      "<option value=\" 24\">Medium</option>" +
      "<option value=\" 36\">Long</option>" +
      "</select></td></tr>" +
      "<tr><td colspan=\"2\" align=\"right\"><input type=\"submit\" value=\"Create\" onClick=\"window.CreateProjectPage.callback();return false;\"/></td></tr>" +
      "</form>" + 
      "</table>";

    return result;
  }
}

export class NotFoundPage {
  render() {
    return "NotFoundPage<h1>404</h1>";
  }
}

export class AutorunnerPage {
  render() {
    return "<h1>Autorunner</h1>todo, reimplement";
  }
}

export class ObjectPage {
  constructor(project, run, type, name) {
    this.project = project;
    this.run = run;
    this.type = type;
    this.name = name;
  }

  renderObject(details) {
    console.dir(details);

    let result = "";

    result = result + "<table>";
    for(let block of details.BLOCKS) {
      let index = 0;
      for(let line of block.SOURCE) {
        index++;
        let code = line.LINE.replace(/\</g, "&lt;").replace(/\>/g, "&gt;");
        result = result + "<tr><td>" + index + "</td>" +
          "<td nowrap><pre>"+ code + "</pre></td>" + 
          "<td nowrap>";
        for(let coverage of block.COVERAGE) {
          let covering = false;
          for(let meta of coverage.META) {
            if(meta.ROW === index && meta.COLOR === 102) {
              covering = true;
              break;
            } 
          }
          if(covering === true) {
            result = result + coverage.CLASS_NAME + "&nbsp;&nbsp;";
          }
        }
        result = result + "</td></tr>";
      }
      result = result + "<tr><td>&nbsp;</td><td></td><td></td></tr>";
    }
    return result + "</table>";
  }

  render() {
    return "<h1>" + this.name + " " + this.type + "</h1>"+
      REST.objectDetails(this.project, this.run, this.type, this.name, this.renderObject.bind(this));
  }
}

export class ObjectsPage {
  constructor(project, run) {
    this.project = project;
    this.run = run;
  }

  renderList(objects) {
    let result = "todo: sorting<table>" +
      "<tr>" + 
      "<td><u>Name</u></td>" + 
      "<td><u>Type</u></td>" + 
      "<td><u>Package</u></td>" + 
      "<td><u>Skipped</u></td>" + 
      "<td><u>Tests</u></td>" + 
      "<td><u>Runtime</u></td></tr>";

    for(let object of objects) {
      let to = "projects/" + this.project + "/runs/" + this.run + "/objects/" + object.OBJECT_TYPE + "/" + object.OBJECT_NAME;

      result = result + 
        "<tr>" +
        "<td>" + Router.link(to, object.OBJECT_NAME) + "</td>" +
        "<td>" + object.OBJECT_TYPE + "</td>" +
        "<td>" + object.DEVCLASS + "</td>" +
        "<td>" + object.HAS_SKIPPED_TESTS + "</td>" +
        "<td>" + object.HAS_TESTS + "</td>" +
        "<td align='right'>" + object.RUNTIME + "</td>" +
        "</tr>";
    }
    result = result + "</table>";
    return result;
  }

  render() {
    let result = "<h1>Objects</h1>" + REST.listObjects(this.project, this.run, this.renderList.bind(this));
    return result;
  }
}

export class RunDetailsPage {
  constructor(project, run) {
    this.project = project;
    this.run = run;
  }

  renderObject(object) {
    let result = "<tr>"+
      "<td><b>" + object.OBJECT_NAME + "</b></td>" +
      "<td colspan='3'><b>" + object.OBJECT_TYPE + "</b></td>"+
      "</tr>";

    for(let test of this.details.TESTS) {
      if (test.OBJECT_NAME === object.OBJECT_NAME && test.OBJECT_TYPE === object.OBJECT_TYPE) {
        let color = "red";
        if (test.KIND === "") {
          color = "green";
        }
        result = result + 
          "<tr><td></td>" +
          "<td>" + test.CLASS_NAME + "</td>" + 
          "<td>" + test.METHOD_NAME + "</td>" +
          "<td bgcolor='" + color + "'>" + test.KIND + "&nbsp;&nbsp;&nbsp;</td>" +
          "</tr>";
      }
    }

    return result;
  }

  renderDetails(details) {
    this.details = details;

    let result = "Start: " + details.RUN.START_TIME + "<br>" + 
      "End: " + details.RUN.END_TIME + "<br><br>" +
      Router.link("projects/"+this.project+"/runs/"+this.run+"/objects", "Objects") +
      "<br><br>";

    result = result + "todo, sorting<table>";
    for(let object of details.OBJECTS) {
      if (object.HAS_TESTS === "X") {
        result = result + this.renderObject(object);
      }
    }
    result = result + "</table>";

    return result;
  }

  render() {
    return "<h1>" + this.project + " - Run #" + this.run + "</h1>" +
      REST.runDetails(this.project, this.run, this.renderDetails.bind(this));
  }
}

export class ProjectPage {
  constructor(name) {
    this.name = name;
  }

  renderDetails(details) {
    return "Package: " + details.DEVCLASS + "<br>";
  }

  renderChart(list) {
    var ctx = document.getElementById("myChart").getContext('2d');

    let labels = [];
    let passed = [];
    let failed = [];
    for(let run of list) {
      labels.push("Run #" + run.RUN_NAME);
      passed.push(run.TESTS_PASSED);
      failed.push(run.TESTS_FAILED);
    }

    var myChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
            label: 'Passed',
            backgroundColor: 'rgb(50, 205, 50)',
            borderWidth: 1,
            borderColor: 'rgb(0, 0, 0)',
            data: passed
        }, {
            label: 'Failed',
            backgroundColor: 'rgb(255, 40, 0)',
            borderWidth: 1,
            borderColor: 'rgb(0, 0, 0)',
            data: failed
        }]
      },
      options: {
          scales: {
            xAxes: [{stacked: true}],
            yAxes: [{stacked: true, ticks: {beginAtZero:true}}]
          }
      }
    });
  }

  renderRuns(list) {
    if (list.length === 0) {
      return "empty list, no runs, schedule background job ZAOT_RUNNER<br>";
    }

    let result = "<table><tr><td></td><td></td><td><u>Objects</u></td><td><u>Passed</u></td><td><u>Failed</u></td></tr>";
    for(let run of list) {
      result = result + 
        "<tr>" +
        "<td>" + Router.link("projects/"+this.name+"/runs/"+run.RUN_NAME, "Run #" + run.RUN_NAME) + "</td>" + 
        "<td align='right'>" + Time.ago(Time.parse(run.START_TIME)) + "</td>" + 
        "<td align='right'>" + Router.link("projects/"+this.name+"/runs/"+run.RUN_NAME+"/objects", run.OBJECTS) + "</td>" + 
        "<td align='right'>" + run.TESTS_PASSED + "</td>" + 
        "<td align='right'>" + run.TESTS_FAILED + "</td>" +
        "</tr>";
    }
    result = result + "</table>";

    this.renderChart(list);

    result = result + "todo, latest runs, things changed<br>";

    return result;
  }

  render() {
    return "<h1>" + this.name + "</h1>" + 
      REST.projectDetails(this.name, this.renderDetails) + "<br>" +
      "todo: select number of days<br>"+
      REST.listRuns(this.name, this.renderRuns.bind(this)) + 
      "<canvas id='myChart' width='400' height='100'></canvas>";
  }
}

Router.initialize();
Router.run();