const base = '/sap/zabapopentest';

let settings = { 
    package: ""
  };

function handleError(evt, callback, json) {
  if (evt.target.status === 200) {
    if (json === true) {
      callback(JSON.parse(evt.target.responseText).DATA);
    } else {
      callback(evt.target.responseText);
    }
  } else {
    alert("REST call failed, status: " + evt.target.status);
  }
}

class REST {
  static root = base + "/rest/";

  static list(callback) {
    this.get("list?IV_PACKAGE=" + settings.package, callback);
  }

  static get(folder, callback, json = true) {
    let oReq = new XMLHttpRequest();
    oReq.addEventListener("load", (evt) => { handleError(evt, callback, json); });
    oReq.open("GET", this.root + folder);
    oReq.send();
  }

  static post(folder, callback, data) {
    let oReq = new XMLHttpRequest();
    oReq.addEventListener("load", (evt) => { handleError(evt, callback, false); });
    oReq.open("POST", this.root + folder);
    oReq.send(JSON.stringify(data));
  }
}

class SettingsComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = settings;
  }

  handleChange(e) {
    settings.package = e.target.value;      
    this.setState(settings)
  }

  render() {
    return (<div>settings
      Package: <input name="package" type="text" maxlength="30" value={ 
      this.state.package } onChange={
      this.handleChange.bind(this)} />
    </div>);
  }
}

class ClassComponent extends React.Component {
  render() {
    console.log(this.props);
    return (<div>hello</div>);
  }
}

class ResultsComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { result: []};
  }

  componentDidMount() {
    REST.list(this.receiveList.bind(this));
  }

  receiveList(list) {
    this.state.result = list;
    this.setState(this.state);
    setTimeout(() => {REST.list(this.receiveList.bind(this)); }, 1000);
  }

  render() {
console.dir(this.state.result);
    return (<b>results{this.state.result.map((e) => { return <ClassComponent class={e} />; } )}</b>);
  }
}

class Application extends React.Component {
  render() {     
    return (<div>
      <SettingsComponent />
      <ResultsComponent />
      <a href={base + "/rest/swagger.html"}>swagger</a>
      </div>);
  }
}

ReactDOM.render(<Application />, document.getElementById('app'));

