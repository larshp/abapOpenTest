import {REST} from './rest.js';
import {Router} from './router.js';
import {Time} from './time.js';

export const base = '/sap/zabapopentest';

export class StartPage {
  renderList(list) {
    let result = "";
    for(let project of list) {
      result = result + 
        "<div>" + 
        "Name: " + Router.link("projects/" + project.NAME, project.NAME) + "<br>" +
        "Package: " + project.DEVCLASS + "<br>" +
        Router.link("projects/" + project.NAME + "/runner", "autorunner") + 
        "</div>"
    }
    if(list.length === 0) {
      alert("project list empty");
    }
    return result;
  }

  render() {
    return "<h1>abapOpenTest</h1>" + 
      REST.listProjects(this.renderList) + 
      "<br><a href=\"" + base + "/rest/swagger.html\">swagger</a>";
  }
}

export class NotFoundPage {
  render() {
    return "NotFoundPage<h1>404</h1>";
  }
}

export class AutorunnerPage {
  render() {
    return "<h1>Autorunner</h1>todo, reimplement";
  }
}

export class RunDetailsPage {
  constructor(project, run) {
    this.project = project;
    this.run = run;
  }

  renderObject(object) {
    let result = "<tr>"+
      "<td><b>" + object.OBJECT_NAME + "</b></td>" +
      "<td colspan='3'><b>" + object.OBJECT_TYPE + "</b> (runtime: " + object.RUNTIME + "ms)</td>"+
      "</tr>";

    for(let test of this.details.TESTS) {
      if (test.OBJECT_NAME === object.OBJECT_NAME && test.OBJECT_TYPE === object.OBJECT_TYPE) {
        let color = "red";
        if (test.KIND === "") {
          color = "green";
        }
        result = result + 
          "<tr><td></td>" +
          "<td>" + test.CLASS_NAME + "</td>" + 
          "<td>" + test.METHOD_NAME + "</td>" +
          "<td bgcolor='" + color + "'>" + test.KIND + "&nbsp;</td>" +
          "</tr>";
      }
    }

    return result;
  }

  renderDetails(details) {
    this.details = details;

    let result = "Start: " + details.RUN.START_TIME + "<br>" + 
      "End: " + details.RUN.END_TIME + "<br><br>";

    result = result + "todo, sorting<table>";
    for(let object of details.OBJECTS) {
      if (object.HAS_TESTS === "X") {
        result = result + this.renderObject(object);
      }
    }
    result = result + "</table>";

    return result;
  }

  render() {
    return "<h1>" + this.project + " - Run #" + this.run + "</h1>" +
      REST.runDetails(this.project, this.run, this.renderDetails.bind(this));
  }
}

export class ProjectPage {
  constructor(name) {
    this.name = name;
  }

  renderDetails(details) {
    return "Package: " + details.DEVCLASS + "<br>";
  }

  renderChart(list) {
    var ctx = document.getElementById("myChart").getContext('2d');

let labels = [];
let passed = [];
let failed = [];
    for(let run of list) {
      labels.push("Run #" + run.RUN_NAME);
      passed.push(run.TESTS_PASSED);
      failed.push(run.TESTS_FAILED);
    }
console.dir(labels);
console.dir(passed);
console.dir(failed);

    var myChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ["Run #1", "Blue", "Yellow", "Green", "Purple", "Orange"],
        datasets: [{
            label: 'Passed',
            backgroundColor: 'rgb(50, 205, 50)',
            borderWidth: 1,
            borderColor: 'rgb(0, 0, 0)',
            data: [12, 19, 3, 5, 2, 3]
        }, {
            label: 'Failed',
            backgroundColor: 'rgb(255, 40, 0)',
            borderWidth: 1,
            borderColor: 'rgb(0, 0, 0)',
            data: [12, 19, 3, 5, 2, 3]
        }]
      },
      options: {
          scales: {
            xAxes: [{stacked: true}],
            yAxes: [{stacked: true, ticks: {beginAtZero:true}}]
          }
      }
    });
  }

  renderRuns(list) {
    let result = "<table><tr><td></td><td></td><td><u>Passed</u></td><td><u>Failed</u></td></tr>";
    for(let run of list) {
      result = result + 
        "<tr>" +
        "<td>" + Router.link("projects/"+this.name+"/runs/"+run.RUN_NAME,"Run #" + run.RUN_NAME) + "</td>" + 
        "<td>" + Time.ago(Time.parse(run.START_TIME)) + "</td>" + 
        "<td>" + run.TESTS_PASSED + "</td>" + 
        "<td>" + run.TESTS_FAILED + "</td>" +
        "</tr>";
// todo, box with green and red [green      |red] per run, displaying successes and failures
    }
    result = result + "</table>";

    if (list.length === 0) {
      result = result + "empty";
    }

    this.renderChart(list);

    result = result + "todo, latest runs, things changed<br>";

    return result;
  }

  render() {
    return "<h1>" + this.name + "</h1>" + 
      REST.projectDetails(this.name, this.renderDetails) + "<br>" +
      REST.listRuns(this.name, this.renderRuns.bind(this)) + 
      "<canvas id='myChart' width='400' height='100'></canvas>";
  }
}

Router.initialize();
Router.run();