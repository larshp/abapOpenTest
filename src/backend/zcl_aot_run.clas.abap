class ZCL_AOT_RUN definition
  public
  create private .

public section.

  class-methods CREATE
    importing
      !IO_PROJECT type ref to ZCL_AOT_PROJECT
    returning
      value(RO_RUN) type ref to ZCL_AOT_RUN .
  class-methods GET_INSTANCE
    importing
      !IV_RUN_ID type ZAOT_RUN_ID
    returning
      value(RO_RUN) type ref to ZCL_AOT_RUN .
  class-methods LOOKUP
    importing
      !IV_PROJECT type ZAOT_PROJECT_NAME
      !IV_RUN_NAME type ZAOT_RUN_NAME
    returning
      value(RO_RUN) type ref to ZCL_AOT_RUN .
  methods APPEND_OBJECT
    importing
      !IS_OBJECT type ZAOT_OBJECTS .
  methods APPEND_TEST
    importing
      !IS_TEST type ZAOT_TESTS .
  methods GET_OBJECTS
    returning
      value(RT_OBJECTS) type ZAOT_OBJECTS_TT .
  methods GET_TESTS
    returning
      value(RT_TESTS) type ZAOT_TESTS_TT .
  methods SAVE .
  methods SET_END_TIME .
  methods SET_START_TIME .
  methods GET_DETAILS
    returning
      value(RS_RUN) type ZAOT_RUNS .
protected section.
private section.

  data MS_RUN type ZAOT_RUNS .
  data MT_TESTS type ZAOT_TESTS_TT .
  data MT_OBJECTS type ZAOT_OBJECTS_TT .
ENDCLASS.



CLASS ZCL_AOT_RUN IMPLEMENTATION.


  METHOD append_object.

    ASSERT is_object-run_id IS INITIAL.
    ASSERT NOT is_object-object_name IS INITIAL.
    ASSERT NOT is_object-object_type IS INITIAL.

    DATA(ls_object) = is_object.
    ls_object-run_id = ms_run-run_id.

    APPEND ls_object TO mt_objects.

  ENDMETHOD.


  METHOD append_test.

    ASSERT NOT is_test-program_name IS INITIAL.
    ASSERT NOT is_test-class_name IS INITIAL.
    ASSERT NOT is_test-method_name IS INITIAL.
    ASSERT NOT is_test-object_name IS INITIAL.
    ASSERT NOT is_test-object_type IS INITIAL.

    DATA(ls_test) = is_test.
    ls_test-run_id = ms_run-run_id.

    APPEND ls_test TO mt_tests.

  ENDMETHOD.


  METHOD create.

    CREATE OBJECT ro_run.
    ro_run->ms_run-project = io_project->get_details( )-project.

* This is bad, might fail in a concurrency scenario, but hmm
    SELECT * FROM zaot_runs INTO TABLE @DATA(lt_runs)
      WHERE project = @ro_run->ms_run-project.
    ro_run->ms_run-run_name = lines( lt_runs ) + 1.
    CONDENSE ro_run->ms_run-run_name.

    TRY.
        ro_run->ms_run-run_id = cl_system_uuid=>create_uuid_x16_static( ).
      CATCH cx_uuid_error.
        ASSERT 0 = 1.
    ENDTRY.

  ENDMETHOD.


  METHOD get_details.

    rs_run = ms_run.

  ENDMETHOD.


  METHOD get_instance.

    CREATE OBJECT ro_run.

    SELECT SINGLE * FROM zaot_runs INTO ro_run->ms_run WHERE run_id = iv_run_id.
    ASSERT sy-subrc = 0.

    SELECT * FROM zaot_objects INTO TABLE ro_run->mt_objects WHERE run_id = iv_run_id.

    SELECT * FROM zaot_tests INTO TABLE ro_run->mt_tests WHERE run_id = iv_run_id.

  ENDMETHOD.


  METHOD get_objects.

    rt_objects = mt_objects.

  ENDMETHOD.


  METHOD get_tests.

    rt_tests = mt_tests.

  ENDMETHOD.


  METHOD lookup.

    DATA(lt_runs) = zcl_aot_project=>get_instance( iv_project )->list_runs( ).

    READ TABLE lt_runs INTO DATA(ls_run) WITH KEY run_name = iv_run_name.
    ASSERT sy-subrc = 0.

    ro_run = zcl_aot_run=>get_instance( ls_run-run_id ).

  ENDMETHOD.


  METHOD save.

    INSERT zaot_runs FROM ms_run.
    ASSERT sy-subrc = 0.

    INSERT zaot_objects FROM TABLE mt_objects.

    INSERT zaot_tests FROM TABLE mt_tests.

  ENDMETHOD.


  METHOD set_end_time.

    GET TIME STAMP FIELD ms_run-end_time.

  ENDMETHOD.


  METHOD set_start_time.

    GET TIME STAMP FIELD ms_run-start_time.

  ENDMETHOD.
ENDCLASS.
