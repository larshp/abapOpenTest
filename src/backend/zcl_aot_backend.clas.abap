class ZCL_AOT_BACKEND definition
  public
  create public .

public section.

  types:
    ty_classes TYPE STANDARD TABLE OF seoclsname WITH DEFAULT KEY .
  types:
    BEGIN OF ty_tests,
        class  TYPE string,
        method TYPE string,
        kind   TYPE c LENGTH 1,
      END OF ty_tests .
  types:
    BEGIN OF ty_test_result,
             seconds TYPE p LENGTH 8 DECIMALS 2,
             tests   TYPE STANDARD TABLE OF ty_tests WITH DEFAULT KEY,
           END OF ty_test_result .

  class-methods LIST_CLASSES
    importing
      !IV_PACKAGE type DEVCLASS
    returning
      value(RT_CLASSES) type TY_CLASSES .
  class-methods RUN_TEST
    importing
      !IV_CLASS type SEOCLSNAME
    returning
      value(RS_RESULT) type TY_TEST_RESULT .
protected section.

  class-methods FIND_SUBPACKAGES
    importing
      !IV_PACKAGE type DEVCLASS
    returning
      value(RT_PACKAGES) type CL_PAK_PACKAGE_QUERIES=>TT_SUBPACKAGE_INFO .
  class-methods GET_RUNNER
    returning
      value(RO_RUNNER) type ref to CL_AUCV_TEST_RUNNER_ABSTRACT .
private section.
ENDCLASS.



CLASS ZCL_AOT_BACKEND IMPLEMENTATION.


  METHOD find_subpackages.

    cl_pak_package_queries=>get_all_subpackages(
      EXPORTING
        im_package                    = iv_package
        im_also_local_packages        = abap_true
      IMPORTING
        et_subpackages                = rt_packages
      EXCEPTIONS
        no_package_specified          = 1
        package_has_no_tdevc_record   = 2
        package_has_no_tadir_record   = 3
        package_does_not_exist        = 4
        invalid_superpackage          = 5
        no_output_parameter_requested = 6
        OTHERS                        = 7 ).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    INSERT VALUE #( package = iv_package ) INTO TABLE rt_packages.

  ENDMETHOD.


  METHOD get_runner.

    DATA: lo_passport TYPE REF TO object.


    CALL METHOD ('\PROGRAM=SAPLSAUCV_GUI_RUNNER\CLASS=PASSPORT')=>get
      RECEIVING
        result = lo_passport.

    ro_runner = cl_aucv_test_runner_standard=>create( lo_passport ).

  ENDMETHOD.


  METHOD list_classes.

    CONSTANTS: lc_type TYPE tadir-object VALUE 'CLAS'.


    DATA(lt_packages) = find_subpackages( iv_package ).
    IF lines( lt_packages ) = 0.
      RETURN.
    ENDIF.

    SELECT obj_name FROM tadir
      INTO TABLE @DATA(lt_tadir)
      FOR ALL ENTRIES IN @lt_packages
      WHERE devclass = @lt_packages-package
      AND pgmid = 'R3TR'
      AND object = @lc_type.                            "#EC CI_GENBUFF

    LOOP AT lt_tadir INTO DATA(ls_tadir).
      DATA(ls_aunit_info) = cl_aunit_prog_info=>get_program_info(
        allow_commit = abap_true
        obj_type     = lc_type
        obj_name     = ls_tadir-obj_name ).
      IF ls_aunit_info-has_tests = abap_true.
        APPEND ls_tadir-obj_name TO rt_classes.
      ENDIF.
    ENDLOOP.

    SORT rt_classes ASCENDING.

  ENDMETHOD.


  METHOD run_test.

    CONSTANTS: lc_risk TYPE saunit_d_allowed_risk_level VALUE 11,
               lc_dura TYPE saunit_d_allowed_rt_duration VALUE 24.

    DATA: lo_casted        TYPE REF TO cl_saunit_internal_result,
          lv_kind          TYPE c LENGTH 1,
          lv_program_index TYPE i,
          lv_class_index   TYPE i,
          lv_method_index  TYPE i,
          lv_t1            TYPE i,
          lv_t2            TYPE i.


    GET RUN TIME FIELD lv_t1.
    get_runner( )->run_for_program_keys(
      EXPORTING
        i_limit_on_duration_category = lc_dura
        i_limit_on_risk_level        = lc_risk
        i_program_keys               = VALUE #( ( obj_name = iv_class
                                                  obj_type = 'CLAS' ) )
      IMPORTING
        e_aunit_result               = DATA(li_aunit) ).
    GET RUN TIME FIELD lv_t2.

    rs_result-seconds = ( lv_t2 - lv_t1 ) / 1000000.

    lo_casted ?= li_aunit.

    LOOP AT lo_casted->f_task_data-programs INTO DATA(ls_program).
      lv_program_index = sy-tabix.
      LOOP AT ls_program-classes INTO DATA(ls_class).
        lv_class_index = sy-tabix.
        LOOP AT ls_class-methods INTO DATA(ls_method).
          lv_method_index = sy-tabix.

          READ TABLE lo_casted->f_task_data-alerts_by_indicies WITH KEY
            program_ndx = lv_program_index
            class_ndx = lv_class_index
            method_ndx = lv_method_index
            INTO DATA(ls_alert).
          IF sy-subrc = 0.
            lv_kind = ls_alert-alerts[ 1 ]-kind.
          ELSE.
            CLEAR lv_kind.
          ENDIF.

          APPEND VALUE #(
            class   = ls_class-info-name
            method  = ls_method-info-name
            kind    = lv_kind ) TO rs_result-tests.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.
