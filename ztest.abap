REPORT ztest.

TYPES: BEGIN OF ty_alv,
         program  TYPE string,
         class    TYPE string,
         method   TYPE string,
         seconds  TYPE p DECIMALS 2,
         devclass TYPE tadir-devclass,
         kind     TYPE c LENGTH 1,
         one      TYPE i,
       END OF ty_alv.

TYPES: ty_alv_tt TYPE STANDARD TABLE OF ty_alv WITH EMPTY KEY.

TABLES: tadir.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
SELECT-OPTIONS: s_devc FOR tadir-devclass OBLIGATORY,
                s_name FOR tadir-obj_name.
SELECTION-SCREEN END OF BLOCK b1.

PARAMETERS: p_nocov TYPE c RADIOBUTTON GROUP g1,
            p_cov   TYPE c RADIOBUTTON GROUP g1.

PARAMETERS: p_risk TYPE saunit_d_allowed_risk_level DEFAULT '11',
            p_dura TYPE saunit_d_allowed_rt_duration DEFAULT '24'.


START-OF-SELECTION.
  PERFORM run.


CLASS lcl_runner DEFINITION FINAL.

  PUBLIC SECTION.
    METHODS:
      constructor
        IMPORTING is_tadir TYPE sabp_s_tadir_key,
      run
        RETURNING VALUE(rt_alv) TYPE ty_alv_tt.

  PRIVATE SECTION.
    METHODS:
      get_runner
        RETURNING VALUE(ro_runner) TYPE REF TO cl_aucv_test_runner_abstract.

    DATA: ms_tadir  TYPE sabp_s_tadir_key.

ENDCLASS.

CLASS lcl_runner IMPLEMENTATION.

  METHOD constructor.
    ms_tadir = is_tadir.
  ENDMETHOD.

  METHOD run.

    DATA: lo_casted        TYPE REF TO cl_saunit_internal_result,
          lv_seconds       TYPE p DECIMALS 2,
          lv_kind          TYPE c LENGTH 1,
          lv_program_index TYPE i,
          lv_class_index   TYPE i,
          lv_method_index  TYPE i,
          t1               TYPE i,
          t2               TYPE i.

    GET RUN TIME FIELD t1.
    get_runner( )->run_for_program_keys(
      EXPORTING
        i_limit_on_duration_category = p_dura
        i_limit_on_risk_level        = p_risk
        i_program_keys               = VALUE #( ( CORRESPONDING #( ms_tadir ) ) )
      IMPORTING
        e_coverage_result            = DATA(li_coverage)
        e_aunit_result               = DATA(li_aunit) ).
    GET RUN TIME FIELD t2.

    lo_casted ?= li_aunit.

    LOOP AT lo_casted->f_task_data-programs INTO DATA(ls_program).
      lv_program_index = sy-tabix.
      lv_seconds = ( t2 - t1 ) / 1000000.
      LOOP AT ls_program-classes INTO DATA(ls_class).
        lv_class_index = sy-tabix.
        LOOP AT ls_class-methods INTO DATA(ls_method).
          lv_method_index = sy-tabix.

          READ TABLE lo_casted->f_task_data-alerts_by_indicies WITH KEY
            program_ndx = lv_program_index
            class_ndx = lv_class_index
            method_ndx = lv_method_index
            INTO DATA(ls_alert).
          IF sy-subrc = 0.
            lv_kind = ls_alert-alerts[ 1 ]-kind.
          ELSE.
            CLEAR lv_kind.
          ENDIF.

          APPEND VALUE #(
            program = ls_program-info-name
            class   = ls_class-info-name
            method  = ls_method-info-name
            seconds = lv_seconds
            kind    = lv_kind
            one     = 1 ) TO rt_alv.
          CLEAR lv_seconds.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.

  METHOD get_runner.

    DATA: lo_passport TYPE REF TO object.


    CALL METHOD ('\PROGRAM=SAPLSAUCV_GUI_RUNNER\CLASS=PASSPORT')=>get
      RECEIVING
        result = lo_passport.

    IF p_cov = abap_true.
      ro_runner = cl_aucv_test_runner_coverage=>create( lo_passport ).
    ELSE.
      ro_runner = cl_aucv_test_runner_standard=>create( lo_passport ).
    ENDIF.

  ENDMETHOD.

ENDCLASS.

FORM run RAISING cx_salv_msg.

  DATA: lt_alv TYPE ty_alv_tt.

  SELECT obj_name, object, devclass FROM tadir
    INTO TABLE @DATA(lt_tadir)
    WHERE devclass IN @s_devc
    AND obj_name IN @s_name
    AND object = 'CLAS'.

  LOOP AT lt_tadir INTO DATA(ls_tadir).
    DATA(lv_text) = |Processing { sy-tabix }/{ lines( lt_tadir ) } { ls_tadir-obj_name }|.
    cl_progress_indicator=>progress_indicate(
      i_text               = lv_text
      i_processed          = sy-tabix
      i_total              = lines( lt_tadir )
      i_output_immediately = abap_true ).

    DATA(ls_aunit_info) = cl_aunit_prog_info=>get_program_info(
      allow_commit = abap_true
      obj_type     = ls_tadir-object
      obj_name     = ls_tadir-obj_name ).
    IF ls_aunit_info-has_tests = abap_false.
      CONTINUE.
    ENDIF.

    DATA(ls_key) = VALUE sabp_s_tadir_key(
      obj_name = ls_tadir-obj_name
      obj_type = ls_tadir-object ).
    DATA(lt_lines) = NEW lcl_runner( ls_key )->run( ).
    LOOP AT lt_lines ASSIGNING FIELD-SYMBOL(<ls_line>).
      <ls_line>-devclass = ls_tadir-devclass.
    ENDLOOP.
    APPEND LINES OF lt_lines TO lt_alv.
  ENDLOOP.

  cl_salv_table=>factory(
    IMPORTING
      r_salv_table = DATA(lo_alv)
    CHANGING
      t_table      = lt_alv ).

  lo_alv->get_columns( )->set_optimize( ).
  lo_alv->get_functions( )->set_all( ).
  lo_alv->display( ).

ENDFORM.
